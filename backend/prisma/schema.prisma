// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//사용자 테이블
model user{
  id                  String          @id
  name                String
  sex                 Sex
  phone               String
  password            String
  birth               DateTime
  subscription        Subscription    @default(FREE)  // 기본값: FREE
  cartId              String?         @unique

  cart                cart?           //유저:장바구니 = 1:1
  counsel             counsel[]       //유저:상담 = 1:N
  order               order[]         //유저:결제 = 1:N
}

//전문가 테이블
model expert{
  id                  Int             @id @default(autoincrement())
  name                String        
  type                ExpertType      //전문가 타입
  rate                Float           //평점
  intro               String          //소개
  categoryId          Int

  category            category        @relation(fields: [categoryId], references: [id])
  counsel             counsel[]       //전문가:상담 = 1:N
}

//상담 테이블
model counsel{
  id                  Int             @id @default(autoincrement())
  counselor           Int             //FK (Expert id 참조)
  client              String          //FK (User id 참조)
  reservation_date    DateTime
  reservation_time    DateTime

  user                user            @relation(fields: [client], references: [id], onDelete: Cascade)
  expert              expert          @relation(fields: [counselor], references: [id], onDelete: Cascade)
}

//상품 테이블
model product{
  id                  Int             @id @default(autoincrement())
  name                String
  price               Int
  maxLimit            Int             //일일 섭취량 상한
  minLimit            Int             //일일 섭취량 하한
  scale               String          //단위
  type                ProductType     //상품 종류

  productCategory     productCategory[]
  orderItem           orderItem[]
  cartItem            cartItem[]      //상품:장바구니 = N:M
}

//기능 테이블
model category{
  id                  Int             @id @default(autoincrement())
  category            String
  
  expert              expert[]              //전문가:카테고리 = N:1
  productCategory     productCategory[]     //상품 : 기능 = M:N
}

//상품 기능 테이블 (상품 : 기능 = M : N 관계)
model productCategory{
  category_id         Int
  product_id          Int
  
  category            category        @relation(fields: [category_id], references: [id])
  product             product         @relation(fields: [product_id], references: [id])

  @@id([category_id, product_id])
}

//결제 테이블
model order{
  id                  Int             @id @default(autoincrement())
  buyer               String
  status              OrderStatus     //결제 상태
  total_price         Int
  created_at          DateTime        @default(now())         //결제시간

  user                user            @relation(fields: [buyer], references: [id])

  orderItem           orderItem[]     //결제 : 각 결제상품 = 1:N
}

//각 결제 상품 테이블
model orderItem{
  pay_id              Int
  product_id          Int
  quantity            Int
  price               Int

  order               order           @relation(fields: [pay_id], references: [id])
  product             product         @relation(fields: [product_id], references: [id])

  @@id([pay_id, product_id])
}

//장바구니 테이블
model cart{
  id                  Int             @id @default(autoincrement())
  owner               String          @unique

  user                user?           @relation(fields: [owner], references: [id], onDelete: Cascade)
  cartItem            cartItem[]      //상품:장바구니 = M:N
}

//상품-장바구니 관계 테이블
model cartItem{
  cartId              Int
  productId           Int
  quantity            Int

  cart                cart            @relation(fields: [cartId], references: [id])
  product             product         @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
}

//성별
enum Sex{
  MAN         //남자
  WOMAN       //여자
}

//구독
enum Subscription{
  FREE
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

//전문가 타입
enum ExpertType{
  DOCTOR              // 의사
  NUTRITIONIST        // 영양사
  PHARMACIST          // 약사
}

//상품 종류
enum ProductType{
  TYPE1               // 개별 인정형
  TYPE2               // 고시형
}

//결제 상태
enum OrderStatus{
  PENDING             // 결제 대기중
  SUCCEEDED           // 결제 완료
  FAILED              // 결제 취소 혹은 실패
}